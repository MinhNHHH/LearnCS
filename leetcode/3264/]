package main

import "fmt"

type MinHeap struct {
	array []int
}

func NewMinHeap() *MinHeap {
	return &MinHeap{}
}

func (h *MinHeap) Insert(key int) {
	h.array = append(h.array, key)
	h.heapifUp(len(h.array) - 1)
}

func (h *MinHeap) heapifUp(index int) {
	for index > 0 {
		parentIndex := (index - 1) / 2
		if h.array[parentIndex] <= h.array[index] {
			break
		}
		h.array[parentIndex], h.array[index] = h.array[index], h.array[parentIndex]
		index = parentIndex
	}
}


func (h*MinHeap) Delete() int {
	if len(h.array) == 0 {
		panic("Heap is empty")
	}

	minHeap := h.array[0]
	last := len(h.array) - 1
	h.array[0] = h.array[last]
	h.array = h.array[:last]

	if len(h.array) > 0 {
		h.heapifDown(0)
	}
	return minHeap
}

fuin
func getFinalState(nums []int, k int, multiplier int) []int {
	return []int{}
}

func main() {
	fmt.Println(getFinalState([]int{2, 1, 3, 5, 6}, 5, 2))
}
